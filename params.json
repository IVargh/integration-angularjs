{"name":"Angularjs tealiumiq-module","tagline":"angularJS module for adding tealiumIQ support","body":"##**angularJS TealiumIQ integration**##\r\n----------\r\nThis is a sample module to integrate tealiumIQ into your site easily. \r\nThe main libraries for tealium are:\r\n\r\n - **tealium.js**\r\n - **tealium_data.js**\r\n\r\ntealium.js - contains the main logic to be called when a route updates or an element who's selector has been added to the config is clicked.\r\n\r\ntealium_data.js - contains the data object that references each page that you define.\r\n\r\n\r\n----------\r\n\r\n\r\n----------\r\n\r\n\r\n###**Sample usage**###\r\n----------\r\nIn your app module add the 'TealiumHelper' dependency\r\nexample: \r\n\r\n    app = angular.module('app', ['TealiumHelper']);\r\n\r\nIn your application controller, call tealium.view() in a listener for any given event:\r\n\r\n     app.controller('appController', \r\n\t\tfunction($scope, tealium) {\r\n\t\t...\r\n\t     $scope.$on(\"$includeContentLoaded\", // any broadcast event to listen for\r\n        \tfunction () {\r\n          \t\ttealium.view();\r\n        \t});\r\n        ...\r\n\t    }\r\n\t );\r\n\r\n** Another alternative is to declare a function in the current scope and call it inline when an element loads\r\n\r\n     app.controller('appController', \r\n\t\tfunction($scope, tealium) {\r\n\t\t...\r\n\t     $scope.tealiumView = tealium.view;\r\n        ...\r\n\t    }\r\n\t );\r\nYou can then use tealiumView() anywhere thats within scope of your app controller to fire a tealium view, effectively simulating a page view event.\r\nexample:\r\n\r\n    < body ng-app=\"App\" >\r\n    ...\r\n       < div class=\"slide-animate-container\" >\r\n         < div ng-view class=\"slide-animate\" >\r\n         ...\r\n           < div ng-include=\"template.url\" onload= \"tealiumView()\" >< /div >\r\n         < /div >\r\n       < /div >\r\n    \r\n     < /div >\r\n    < /body >\r\n\r\n** These are only sample methods to implement, choose whichever meets your apps needs the best.\r\n\r\n####**Configuring the Tealium Module**####\r\n#####**TealiumConfigure**#####\r\nIn **tealium.js** the following items need to be edited. In the '**TealiumConfigure**' module there are the following items\r\n\r\n - **this.uiSelectors** - (String) CSS selectors for elements you want to add automatic link tracking to. (example:  '.trackable, input')\r\n - **this.view_id** - (String reference) an object that is a reference or function that returns a unique key for the current view. This key will match the view keys in the 'TealiumUDO' module \r\n - **this.data_connector** - (Object) an object representing a set of data that you want to pass to the 'TealiumUDO' module to ingest.\r\n - **this.account** (String) tealiumIQ account\r\n - **this.profile** (String) tealiumIQ profile\r\n - **this.environment** (String) tealiumIQ environment (\"dev\", \"qa\", \"prod\")\r\n - **this.suppress_first_view** (bool) true disables the default utag.view() track call by default when the library loads\r\n#####**TealiumUDO**#####\r\nIn **tealium_data.js** the following items need to be edited. In the '**TealiumUDO**' module there is a view_id_map object that are a set of key:value pairs. \r\n \r\n - The keys are strings that match the view_id being passed from '**TealiumConfigure**'\r\n - The values are references to closures which return an object literal that matches the page type of the view_id\r\nFor every key in view_id_map the closure references need to exist such that they are:\r\n - An anonymous function\r\n - return an object literal with all data that needs to be exposed for the page type associated with the view_id\r\n\r\n<br><br><br>\r\n**In this repo is a set of very simple files to test the plugin**\r\n\r\n**http://plnkr.co/edit/3qQNwf1eOi4SfnDT3IPg a plunker to test the files\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}